<?xml version="1.0"?><phpdoc><class name="Tree" extends="PEAR" undoc="false" access="private" package="ilias-core"><file>/home/pgabriel/public_html/ilias3/classes/class.tree.php</file><doc><author email="shofmann@databay.de">Sascha Hofmann</author><author email="smeyer@databay.de">Stefan Meyer</author><description>data representation in hierachical trees using the Nested Set Model by Joe Celco</description><shortdescription>Tree class</shortdescription><version>$Id$</version></doc><function name="Tree" undoc="false" access="public"><doc><parameter name="$a_node_id" type="integer">node_id</parameter><parameter name="$a_parent_id" type="integer">parent_id</parameter><parameter name="$a_root_id" default="ROOT_FOLDER_ID," type="string">root_id (optional)</parameter><parameter name="$a_tree_id" default="1" type="integer">tree_id (optional)</parameter><return type="void"/><description/><shortdescription>constructor</shortdescription></doc></function><function name="getLeafs" undoc="false" access="public"><doc><return name="" type="object error">object in case of an error</return><description/><shortdescription>get leaf-nodes of tree</shortdescription></doc></function><function name="getChilds" undoc="false" access="public"><doc><parameter name="$a_node_id" type="integer">node_id</parameter><parameter name="$a_order" default="&amp;quot;&amp;quot;" type="string">sort order of returned childs, optional (possible values: &amp;apos;title&amp;apos;,&amp;apos;desc&amp;apos;,&amp;apos;last_update&amp;apos; or &amp;apos;type&amp;apos;)</parameter><parameter name="$a_direction" default="&amp;quot;ASC&amp;quot;" type="string">sort direction, optional (passible values: &amp;apos;DESC&amp;apos; or &amp;apos;ASC&amp;apos;; defalut is &amp;apos;ASC&amp;apos;)</parameter><return name="" type="boolean">true when node has childs, otherwise false</return><description/><shortdescription>get subnodes of given node</shortdescription></doc></function><function name="getAllChildsByType" undoc="false" access="public"><doc><parameter name="$a_node_id" type="integer">node_id</parameter><parameter name="$a_parent_id" type="integer">parent_id</parameter><parameter name="$a_type" type="string">object type definition</parameter><return name="" type="array">childs by type</return><description/><shortdescription>get subnodes of given node by type</shortdescription></doc></function><function name="insertNode" undoc="false" access="public"><doc><parameter name="$a_node_id" type="integer">node_id</parameter><parameter name="$a_parent_id" default="&amp;quot;&amp;quot;" type="string">parent_id (optional)</parameter><return name="$error" type="object [unknown]">error object on error</return><description/><shortdescription>insert node under parent node</shortdescription></doc></function><function name="deleteNode" undoc="false" access="public"><doc><parameter name="$a_node_id" default="&amp;quot;&amp;quot;" type="string">node_id</parameter><parameter name="$a_parent_id" default="&amp;quot;&amp;quot;" type="string">parent_id (optional)</parameter><return name="$error" type="object [unknown]">error object on error</return><description/><shortdescription>delete node under parent node</shortdescription></doc></function><function name="moveNode" undoc="false" access="public"><doc><parameter name="$a_node_id" type="integer">node_id</parameter><parameter name="$a_parent_id" type="integer">parent_id</parameter><parameter name="$a_target_id" type="integer">node_id of parent node where the node is moved to</parameter><return type="void"/><description/><shortdescription>move a node into another position within the tree</shortdescription></doc></function><function name="deleteTree" undoc="false" access="public"><doc><parameter name="$a_node_id" default="&amp;quot;&amp;quot;" type="string">node_id (optional)</parameter><parameter name="$a_parent_id" default="&amp;quot;&amp;quot;" type="string">parent_id (optional)</parameter><return name="$error" type="object [unknown]">error object on error</return><description/><shortdescription>delete node and the whole subtree under this node</shortdescription></doc></function><function name="fetchPath" undoc="false" access="private"><doc><parameter name="$a_endnode" default="&amp;quot;&amp;quot;" type="string">node_id of endnode (optional)</parameter><parameter name="$a_endparent" default="&amp;quot;&amp;quot;" type="string">node_id of startnode (optional)</parameter><parameter name="$a_startnode" type="string" undoc="true"/><parameter name="$a_startparent" type="string" undoc="true"/><return name="$res" type="object [unknown]">query result</return><description>if startnode is not given the rootnode is startnodeif endnode is not given the current node is endnode</description><shortdescription>get path from a given startnode to a given endnode</shortdescription></doc></function><function name="getPathFull" undoc="false" access="public"><doc><parameter name="$a_end" default="&amp;apos;&amp;apos;" type="string">node_id of endnode (optional)</parameter><parameter name="$a_endparent" default="&amp;apos;&amp;apos;" type="string">node_id of startnode (optional)</parameter><parameter name="$a_start" type="string" undoc="true"/><parameter name="$a_startparent" type="string" undoc="true"/><return name="$this" type="array"> -&amp;gt;Path		ordered path info (id,title,parent) from start to end</return><description>if startnode is not given the rootnode is startnodeif endnode is not given the current node is endnode</description><shortdescription>get path from a given startnode to a given endnode</shortdescription></doc></function><function name="getPathId" undoc="false" access="public"><doc><parameter name="$a_end" default="&amp;apos;&amp;apos;" type="string">node_id of endnode (optional)</parameter><parameter name="$a_endparent" default="&amp;apos;&amp;apos;" type="string">node_id of startnode (optional)</parameter><parameter name="$a_start" type="string" undoc="true"/><parameter name="$a_startparent" type="string" undoc="true"/><return name="$id" type="array"> all path ids from startnode to endnode</return><description>if startnode is not given the rootnode is startnodeif endnode is not given the current node is endnode</description><shortdescription>get path from a given startnode to a given endnode</shortdescription></doc></function><function name="checkTree" undoc="false" access="public"><doc><return name="" type="boolean">true if tree is ok; otherwise throws error object</return><description/><shortdescription>check consistence of tree</shortdescription></doc></function><function name="display" undoc="false" access="public"><doc><parameter name="$nodes" type="array">tree information</parameter><parameter name="$start" type="integer">node_id of current startnode</parameter><parameter name="$level" type="integer">level of current node</parameter><parameter name="$open" default="&amp;quot;&amp;quot;" type="string">information about opened folders (optional; is set automatically)</parameter><parameter name="$out" default="&amp;quot;&amp;quot;" type="string">end result of recursion (optional, is set automatically)</parameter><parameter name="$tabarr" default="&amp;quot;&amp;quot;" type="string">information about the needed tabstops for each node (optional, is set automatically)</parameter><return name="$out" type="array"> complete tree in a flat structure to display all elements sequently</return><description/><shortdescription>builds an array of a flattened tree for output purposes</shortdescription></doc></function><function name="buildTree" undoc="false" access="public"><doc><parameter name="$nodes" type="array">tree information</parameter><return name="$knoten" type="array"> all expanded nodes &amp; their childs</return><description/><shortdescription>fetch all expanded nodes &amp; their childs</shortdescription></doc></function><function name="showPath" undoc="false" access="public"><doc><parameter name="$a_path" type="array">full path information</parameter><parameter name="$a_scriptname" type="string">scriptname to use for hyperlinks</parameter><return name="$path" type="string"> HTML-formatted string</return><description/><shortdescription>builds a string in HTML to output path information</shortdescription></doc></function><function name="getChildsByDepth" undoc="false" access="public"><doc><parameter name="$a_depth" type="integer">tree-level</parameter><parameter name="$a_parent" type="integer">node_id</parameter><return name="$childs" type="array"> childs</return><description/><shortdescription>get all childs from a node by depth</shortdescription></doc></function><function name="getMaximumDepth" undoc="false" access="public"><doc><return name="" type="int"/><description/><shortdescription>Return the maximum depth in tree</shortdescription></doc></function><function name="getDepth" undoc="false" access="public"><doc><parameter name="$a_child" type="int"/><parameter name="$a_parent" type="int"/><parameter name="$a_tree" type="integer" undoc="true"/><return name="" type="int"/><description/><shortdescription>Return depth of an object</shortdescription></doc></function><function name="calculateFlatTree" undoc="false" access="public"><doc><parameter name="$a_tree_id" default="&amp;quot;&amp;quot;" type="string">(optional)</parameter><return name="" type="array">array of new tree information (to be specified.... :-)</return><description>no. of successors:	How many successors does the node have?Every node under the concerned node in the tree counts as a successor.depth			   :	The depth-level in tree the concerned node has. (the root node has a depth of 1!)brother		   :	The no. of node which are on the same depth-level with the concerned node</description><shortdescription>Calculates additional information for each node in tree-structure:</shortdescription></doc></function><function name="getNodeData" undoc="false" access="public"><doc><parameter name="$a_obj_id" type="int"/><parameter name="$a_parent_id" type="int"/><return name="" type="array"/><description/><shortdescription>get data of a specific node from tree and object_data</shortdescription></doc></function><function name="getParentNodeData" undoc="false" access="public"><doc><parameter name="$a_obj_id" type="int">id</parameter><parameter name="$a_parent_id" type="int">id</parameter><return name="" type="array"/><description/><shortdescription>get data of parent node from tree and object_data</shortdescription></doc></function><variable name="$db" access="private" type="object [unknown]"><doc><description/><shortdescription>database handle</shortdescription></doc></variable><variable name="$ilias" access="private" type="object [unknown]"><doc><description/><shortdescription>ilias object</shortdescription></doc></variable><variable name="$node_id" access="public" type="integer"><doc><description/><shortdescription>points to actual position in tree (node)</shortdescription></doc></variable><variable name="$parent_id" access="public" type="integer"><doc><description/><shortdescription>parent of current node. This information is needed for multi-refering the same child in the tree</shortdescription></doc></variable><variable name="$root_id" access="public" type="integer"><doc><description/><shortdescription>points to root node (may be a subtree)</shortdescription></doc></variable><variable name="$tree_id" access="public" type="integer"><doc><description/><shortdescription>to use different trees in one db-table</shortdescription></doc></variable><variable name="$Path" access="public" type="array"><doc><description/><shortdescription>contains the path from root to current node (node_id)</shortdescription></doc></variable><variable name="$Childs" access="public" type="array"><doc><description/><shortdescription>contains all subnodes of node (node_id)</shortdescription></doc></variable><variable name="$Leafs" access="public" type="array"><doc><description/><shortdescription>contains leaf nodes of tree</shortdescription></doc></variable><variable name="$maxlvl" access="private" type="integer"><doc><description/><shortdescription>max level of tree for display</shortdescription></doc></variable></class></phpdoc>