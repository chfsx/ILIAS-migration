ILIAS – Programmierrichtlinen
=============================
Version: $Id$

Dieses Dokument stellt die Programmierrichtlinien zur Programmierung von Ilias zur Verfügung, damit ein einheitliches Aussehen gewährleistet wird.

Wenn nicht anders angegeben gelten die Bestimmungen in den Databay-Programmierrichtlinien (ebenfalls im CVS-Verzeichnis vorhanden)

Editor
======
Benutzen Sie einen Editor, der mit den Windows und Unix Linefeed Formaten zurecht kommt, da das Projekt auf verschiedenen Plattformen bearbeitet wird.
Empfehlung: auf beiden Seiten (Windows/Linux) Xemacs (Am Anfang schwierig).

Tabstops setzen, keine Leerzeichen. Empfohlene Tabstoplänge 4 Zeichen.

Variablen
=========
Variablenbezeichner werden komplett klein geschrieben.

Übergebene Variablen werden mit a_ begonnen, beispielsweise

function setName($a_name)
{
	$this->name = $a_name;
}

Weiterhin soll es in ILIAS keinerlei globale Variablen geben. Dies ist aus Softwarearchitektonischer Sicht sinnvoll. Übergebene Parameter (POST/GET Methode) werden in den PHP-Arrays $_POST und $_GET zur Verfügung gestellt. Diese sind immer global verfügbar.

Bei zusammengesetzten Variablen versuchen, diese mit 3Buchstaben COdes zu bilden.
Beispiel:
$usrmailcount, $grpview

Bei der Bildung von Arrays die Variablenbezeichner wie die Datenbankspalten benennen. Möglichst auch für Templates.

Programmierkonstrukte
=====================

Funktionen:
klein beginnen, dann Silbenweise ein Großbuchstaben,
z.B.
function setUserNameById($id)
{
	return true;
}


Klammersetzung:
geschweifte Klammern jeweils in die nächste Zeile, for Kontrollstrukturen wie if, for usw. eine Zeile frei.


Switch:
switch ($var1)
{
	case 1:
		setId();
		break;
	default:
		setOtherId();
}

Formulare
=========
Formulare werden grundsätzlich über die POST_Methode gesteuert. Der Name des Formulars muss gesetzt sein, standardmässig ist name="form" zu verwenden.

Mitgeschleifte Parameter wie eine ID sind dabei als action-Parameter anzugeben. Eine Action muss immer laut W3C definiert sein. 

<form name="form" method="post" action="adm_user.php?id=23">
...
</form>

Dadurch wird die wechselnde Verwendung von Parametern in $_POST und $_GET vermieden.


Klassen
=======
Klassen beginnen mit einem Großbuchstaben, weitere Silben werden mit Großbuchstaben begonnen.
Beispiele:
Mail, IniFile.

Die Dateien werden nach folgendem Schema benannt:
class.<Klassenname>.php
Dabei ist die Groß/Kleinschreibung relevant.


Templates
=========
Variablenbezeichner in Großbuchstaben, Blöcke klein.
ein Wort zu HTML: laut W3C, bei alphanumerischen (mit Buchstaben) Werten Anführungszeichen verwenden, HTML ansonsten klein.

Beispiel:
{TXT_NAME}: <input type="text" name="name" value="{NAME}">

auch hier: 3 Buchstaben Codes verwenden (GRP, USR, TXT).

Programmierung auf Webdesigner-Seite vermeiden, also keine Links in Templates ausformulieren, sondern Variablen auf der PHP-Seite setzen. 
Beispiel:
<form ... action="{ACTION}">
und dann
...->setVariable("ACTION", "usrdata.php?id=".$id);

SQL
===
SQL-Anweisungen grundsätzlich groß, PHP-Variablen mit "." abtrennen.
Beispiel:
$sql = "SELECT id, name FROM table1 WHERE grp='". $grpid ."'";